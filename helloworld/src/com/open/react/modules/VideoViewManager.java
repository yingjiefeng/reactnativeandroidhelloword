/** ***************************************************************************************************************************************************************************** *  * @author :fengguangjing * @createTime:2017-6-15下午2:24:19 * @version:4.2.4 * @modifyTime: * @modifyAuthor: * @description: ***************************************************************************************************************************************************************************** */package com.open.react.modules;import java.lang.reflect.Method;import java.util.HashMap;import java.util.Map;import android.net.Uri;import android.os.Build;import android.widget.VideoView;import com.facebook.react.bridge.ReadableMap;import com.facebook.react.bridge.ReadableMapKeySetIterator;import com.facebook.react.uimanager.SimpleViewManager;import com.facebook.react.uimanager.ThemedReactContext;import com.facebook.react.uimanager.annotations.ReactProp;import javax.annotation.Nullable;/** ***************************************************************************************************************************************************************************** * 原生UI组件之VideoView视频播放器开发 * http://blog.csdn.net/it_talk/article/details/52638456 * @author :fengguangjing * @createTime:2017-6-15下午2:24:19 * @version:4.2.4 * @modifyTime: * @modifyAuthor: * @description: ***************************************************************************************************************************************************************************** */public class VideoViewManager extends SimpleViewManager<VideoView>{    @Override    public String getName() {        return "SimpleVideoView";    }    @Override    protected VideoView createViewInstance(ThemedReactContext reactContext) {        VideoView video = new VideoView(reactContext);        return video;    }    @Override    public void onDropViewInstance(VideoView view) {//对象销毁时        super.onDropViewInstance(view);         view.stopPlayback();//停止播放    }    @ReactProp(name = "source")    public void setSource(VideoView videoView,@Nullable ReadableMap source){        if(source != null){            if (source.hasKey("url")) {                String url = source.getString("url");                System.out.println("url = "+url);                HashMap<String, String> headerMap = new HashMap<String, String>();                if (source.hasKey("headers")) {                    ReadableMap headers = source.getMap("headers");                    ReadableMapKeySetIterator iter = headers.keySetIterator();                    while (iter.hasNextKey()) {                        String key = iter.nextKey();                        headerMap.put(key, headers.getString(key));                    }                }                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {                    videoView.setVideoURI(Uri.parse(url),headerMap);                }else{                    try {                        Method setVideoURIMethod = videoView.getClass().getMethod("setVideoURI", Uri.class, Map.class);                        setVideoURIMethod.invoke(videoView, Uri.parse(url), headerMap);                    } catch (Exception e) {                        e.printStackTrace();                    }                }                videoView.start();            }        }    }}